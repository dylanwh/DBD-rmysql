package DBD::rmysql;

# This file is automatically generated by plbindgen.
# Changes to this file will be lost if it is regenerated.

use FFI::Platypus 2.00;
use FFI::Platypus::Lang::C;
use FFI::Platypus::Lang::Rust;
use FFI::CheckLib qw( find_lib_or_die );
use File::Basename qw( dirname );

BEGIN {
    # FIXME: FFI::Platypus::Lang::Rust doesn't have enum.
    my $c_map = FFI::Platypus::Lang::C->native_type_map;
    my $rust_map = FFI::Platypus::Lang::Rust->native_type_map;
    $rust_map->{$_} = $c_map->{$_} for 'enum', 'senum';
    *FFI::Platypus::Lang::Rust::native_type_map = sub { $rust_map };
}

our $VERSION = '0.1.0';

use DBD::rmysql::Error;
use DBD::rmysql::Attribs;


my $ffi = FFI::Platypus->new( api => 2, lang => 'Rust' );
$ffi->bundle;



$ffi->load_custom_type('::Enum',
    'ErrorCode',
    [ Success => 0 ],
    [ Utf8Error => 1 ],
    [ UrlError => 2 ],
    [ ConnectionError => 3 ],
    [ PrepareError => 4 ],
    [ TransactionError => 5 ],
    );

$ffi->type(opaque => 'ConnHandle');
$ffi->type(opaque => 'StatementHandle');


DBD::rmysql::Error->init_record_layout($ffi);
$ffi->type("record(DBD::rmysql::Error)*" => 'Error');
DBD::rmysql::Attribs->init_record_layout($ffi);
$ffi->type("record(DBD::rmysql::Attribs)*" => 'Attribs');


$ffi->attach( rmysql_connect => ['string', 'string', 'string', 'Error'] => 'ConnHandle' );
$ffi->attach( rmysql_disconnect => ['ConnHandle'] => 'void' );
$ffi->attach( rmysql_prepare => ['ConnHandle', 'string', 'Attribs', 'Error'] => 'StatementHandle' );
$ffi->attach( rmysql_statement_destroy => ['StatementHandle'] => 'void' );
$ffi->attach( rmysql_begin_work => ['ConnHandle', 'Error'] => 'bool' );
$ffi->attach( rmysql_commit => ['ConnHandle', 'Error'] => 'bool' );
$ffi->attach( rmysql_rollback => ['ConnHandle', 'Error'] => 'bool' );


1; 